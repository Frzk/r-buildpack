#!/usr/bin/env bash

set -eo pipefail

if [ -n "${BUILDPACK_DEBUG}" ]
then
    set -x
fi

readonly build_dir="${1}"
readonly cache_dir="${2}"
readonly env_dir="${3}"

readonly base_dir="$( cd -P "$( dirname "$0" )" && pwd )"
readonly buildpack_dir="$( readlink -f "${base_dir}/.." )"


readonly url="https://cran.r-project.org/src/base/R-4/R-4.0.0.tar.gz"



# ----
# Install gfortran to compile R

# Use Apt buildpack to install gfortran

cat <<EOF >"${build_dir}/Aptfile"
gfortran
EOF

apt_deps_buildpack_dir=$(mktemp apt_buildpack_XXXX)
rm "${apt_deps_buildpack_dir}"

readonly apt_buildpack_url="https://github.com/Scalingo/apt-buildpack.git"
git clone --depth=1 "${apt_buildpack_url}" "$apt_deps_buildpack_dir"

"${apt_deps_buildpack_dir}/bin/compile" \
    "${build_dir}" "${cache_dir}" "${env_dir}"


# rm -r "$apt_deps_buildpack_dir"

# Check if the apt-buildpack left behind an environment for
# subsequent ones:
echo "apt_deps_buildpack_dir is: ${apt_deps_buildpack_dir}"
echo "buildpack_dir is: ${buildpack_dir}"
echo "build_dir is: ${build_dir}"

# find / -iname "export"


if [ -e "${build_dir}/${apt_deps_buildpack_dir}/export" ]; then
    echo "Sourcing ${build_dir}/${apt_deps_buildpack_dir}/export"
    source "${build_dir}/${apt_deps_buildpack_dir}/export"
fi

#export BUILD_DIR="${build_dir}"
#export PATH="$BUILD_DIR/.apt/usr/bin:$BUILD_DIR/.apt/usr/sbin:$PATH"
#export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/gcc/x86_64-linux-gnu:$BUILD_DIR/.apt/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/lib:$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
#export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/gcc/x86_64-linux-gnu:$BUILD_DIR/.apt/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/lib:$BUILD_DIR/.apt/usr/lib:$LIBRARY_PATH"
#export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$BUILD_DIR/.apt/usr/include/x86_64-linux-gnu:$INCLUDE_PATH"
#export CPATH="$INCLUDE_PATH"
#export CPPPATH="$INCLUDE_PATH"
#export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

#export R_HOME="/tmp/cache/R-4.0.0"
#export R_HOME="${build_dir}/R-4.0.0"

# ----
# Download and compile R

curl -L "${url}" --output "${cache_dir}/R-4.0.0.tar.gz"

tar -xvzf "${cache_dir}/R-4.0.0.tar.gz" --directory "${cache_dir}/"

pushd "${cache_dir}/R-4.0.0"

# R documentation states that Debian-based systems may need to add
# LIBnn=lib but it doesn't seem to bring better results.
./configure --prefix="${build_dir}/R-4.0.0" \
            --enable-java=no \
            --with-recommended-packages=no

make
make install

popd

ln -sfn "${build_dir}/R-4.0.0" "${build_dir}/R"

export PATH="${build_dir}/R/bin:${PATH}"

echo "Done."
